## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
mean(dat_subset[, pollutant], na.rm=TRUE)  #identifies the mean of pollutant with NA removed
}
round(mean(dat_subset), 3)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
mean(dat_subset[, pollutant], na.rm=TRUE)  #identifies the mean of pollutant with NA removed
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
round(mean(dat_subset[, pollutant], na.rm=TRUE)),3)  #identifies the mean of pollutant with NA removed
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
round(mean(dat_subset[, pollutant], na.rm=TRUE)),3)  #identifies the mean of pollutant with NA removed
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
round(mean(dat_subset[, pollutant], na.rm=TRUE),3)  #identifies the mean of pollutant with NA removed
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
round(mean(dat_subset[, pollutant], na.rm=TRUE),3)  #identifies the mean of pollutant with NA removed
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
round(mean(dat_subset[, pollutant], na.rm=TRUE),3)  #identifies the mean of pollutant with NA removed
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe
for (i in id) {      #loops trhough the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"ID"] %in% id),] #subsets the data contained in the 'id' input (%in% is a match function)
round(mean(dat_subset[, pollutant], na.rm=TRUE),3)  #identifies the mean of pollutant with NA removed
}
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## Get a list of filenames
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
#filenames <- list.files(path=directory, pattern="*.csv")
## Initialize variables
ids <- vector()
nobs <- vector()
## Loop over the passed id's
for(i in id) {
## Pad the i to create a filename
files_list <- list.files(directory, full.names=TRUE)
data <- read.csv(files_list)
## Store the id
ids <- c(ids, i)
## Calculate and store the count of complete cases
completeCases <- data[complete.cases(data),]
counts <- c(counts, nrow(completeCases))
}
## Return the data frame
data.frame(id=ids, nobs=counts)
}
complete("specdata", c(2, 4, 8, 10, 12))
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
d2 <- data.frame()  #creates an empty dataframe for current csv file
dobs <- data.frame()  #creates an empty dataframe for all complete observations
dobs2 <- data.frame()  #creates an empty dataframe for current complete observations
for (i in id) {
#loops trhough the files, rbinding them together
d2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
dat <- rbind(dat, d2) #rbinds the current csv with the previous csv
comp_obs <- d2[complete.cases(d2[2:3]),] #removes rows with NA in 2nd or 3rd columns
nobs <- nrow(comp_obs) # counts the rows of complete observations
dobs2 <- c(i, nobs) # fills the variable with current csv complete observations
dobs <- rbind(dobs, dobs2) #adds current csv's observation with previous csv's observations
}
names(dobs) <- c("ID", "nobs") #names the columns
print(dobs) #prints the results
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_full <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
nobs <- data.frame()  #creates an empty dataframe for all complete observations
nobs2 <- data.frame()  #creates an empty dataframe for current complete observations
for (i in id) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
dat <- rbind(dat, dat2) #rbinds the current csv with the previous csv
removeNA <- dat2[complete.cases(dat2[2:3]),] #removes rows with NA in 2nd or 3rd columns
completenobs <- nrow(removeNA) # counts the rows of complete observations
nobs2 <- c(i, obs) # fills the variable with current csv complete observations
nobs <- rbind(nobs, nobs2) #adds current csv's observation with previous csv's observations
}
names(nobs) <- c("ID", "nobs") #names the columns
print(nobs) #prints the results
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_full <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
nobs <- data.frame()  #creates an empty dataframe for all complete observations
nobs2 <- data.frame()  #creates an empty dataframe for current complete observations
for (i in id) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_full[i]) #reads the csv with the current value in "id"
dat <- rbind(dat, dat2) #rbinds the current csv with the previous csv
removeNA <- dat2[complete.cases(dat2[2:3]),] #removes rows with NA in 2nd or 3rd columns
completenobs <- nrow(removeNA) # counts the rows of complete observations
nobs2 <- c(i, obs) # fills the variable with current csv complete observations
nobs <- rbind(nobs, nobs2) #adds current csv's observation with previous csv's observations
}
names(nobs) <- c("ID", "nobs") #names the columns
print(nobs) #prints the results
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_full <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
nobs <- data.frame()  #creates an empty dataframe for all complete observations
nobs2 <- data.frame()  #creates an empty dataframe for current complete observations
for (i in id) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_full[i]) #reads the csv with the current value in "id"
dat <- rbind(dat, dat2) #rbinds the current csv with the previous csv
removeNA <- dat2[complete.cases(dat2[2:3]),] #removes rows with NA in 2nd or 3rd columns
completenobs <- nrow(removeNA) # counts the rows of complete observations
nobs2 <- c(i, completenobs) # fills the variable with current csv complete observations
nobs <- rbind(nobs, nobs2) #adds current csv's observation with previous csv's observations
}
names(nobs) <- c("ID", "nobs") #names the columns
print(nobs) #prints the results
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_full <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
nobs <- data.frame()  #creates an empty dataframe for all complete observations
nobs2 <- data.frame()  #creates an empty dataframe for current complete observations
for (i in id) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_full[i]) #reads the csv with the current value in "id"
dat <- rbind(dat, dat2) #rbinds the current csv with the previous csv
removeNA <- dat2[complete.cases(dat2),] #removes rows with NA in 2nd or 3rd columns
completenobs <- nrow(removeNA) # counts the rows of complete observations
nobs2 <- c(i, completenobs) # fills the variable with current csv complete observations
nobs <- rbind(nobs, nobs2) #adds current csv's observation with previous csv's observations
}
names(nobs) <- c("ID", "nobs") #names the columns
print(nobs) #prints the results
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
complete("specdata", 30:25)
complete("specdata", 3)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
x <- 1   # sets my vector variable to so it counts every time the if is TRUE
corrobs <- c()  #creates an empty vector for all correlated observations
for (i in 1:332) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
completenobs <- dat2[complete.cases(d2),] #removes rows with NA
nobs <- nrow(completenobs) # counts the rows of complete observations
if ((nobs != 0) && (nobs >= threshold)) {   # checks if threshold is met
corobs[x] <- cor(completenobs[2], completenobs[3]) #correlate sulfate and nitrate
x <- (x+1) # variable to go to next element in vector
}
}
return(corrobs)
}
summary(cr)
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
x <- 1   # sets my vector variable to so it counts every time the if is TRUE
corrobs <- c()  #creates an empty vector for all correlated observations
for (i in 1:332) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
completenobs <- dat2[complete.cases(dat2),] #removes rows with NA
nobs <- nrow(completenobs) # counts the rows of complete observations
if ((nobs != 0) && (nobs >= threshold)) {   # checks if threshold is met
corobs[x] <- cor(completenobs[2], completenobs[3]) #correlate sulfate and nitrate
x <- (x+1) # variable to go to next element in vector
}
}
return(corrobs)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
x <- 1   # sets my vector variable to so it counts every time the if is TRUE
corrobs <- c()  #creates an empty vector for all correlated observations
for (i in 1:332) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
completenobs <- dat2[complete.cases(dat2),] #removes rows with NA
nobs <- nrow(completenobs) # counts the rows of complete observations
if ((nobs != 0) && (nobs >= threshold)) {   # checks if threshold is met
corrobs[x] <- cor(completenobs[2], completenobs[3]) #correlate sulfate and nitrate
x <- (x+1) # variable to go to next element in vector
}
}
return(corrobs)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
x <- 1   # sets my vector variable to so it counts every time the if is TRUE
corrobs <- c()  #creates an empty vector for all correlated observations
for (i in 1:332) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
completenobs <- dat2[complete.cases(dat2),] #removes rows with NA
nobs <- nrow(completenobs) # counts the rows of complete observations
if ((nobs != 0) && (nobs >= threshold)) {   # checks if threshold is met
corrobs[x] <- cor(completenobs[2], completenobs[3]) #correlate sulfate and nitrate
x <- (x+1) # variable to go to next element in vector
}
}
round(return(corrobs),5)  #identifies the mean of pollutant with NA removed
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
x <- 1   # sets my vector variable to so it counts every time the if is TRUE
corrobs <- c()  #creates an empty vector for all correlated observations
for (i in 1:332) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
completenobs <- dat2[complete.cases(dat2),] #removes rows with NA
nobs <- nrow(completenobs) # counts the rows of complete observations
if ((nobs != 0) && (nobs >= threshold)) {   # checks if threshold is met
corrobs[x] <- cor(completenobs[2], completenobs[3]) #correlate sulfate and nitrate
x <- (x+1) # variable to go to next element in vector
}
}
round(return(corrobs,5))  #identifies the mean of pollutant with NA removed
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
x <- 1   # sets my vector variable to so it counts every time the if is TRUE
corrobs <- c()  #creates an empty vector for all correlated observations
for (i in 1:332) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
completenobs <- dat2[complete.cases(dat2),] #removes rows with NA
nobs <- nrow(completenobs) # counts the rows of complete observations
if ((nobs != 0) && (nobs >= threshold)) {   # checks if threshold is met
corrobs[x] <- cor(completenobs[2], completenobs[3]) #correlate sulfate and nitrate
x <- (x+1) # variable to go to next element in vector
}
}
round(corrobs,5)
return(corrobs)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files_list <- list.files(directory, full.names=TRUE)  #creates a list of files
dat <- data.frame()  #creates an empty dataframe for csv files
dat2 <- data.frame()  #creates an empty dataframe for current csv file
x <- 1   # sets my vector variable to so it counts every time the if is TRUE
corrobs <- c()  #creates an empty vector for all correlated observations
for (i in 1:332) {
#loops trhough the files, rbinding them together
dat2 <-  read.csv(files_list[i]) #reads the csv with the current value in "id"
completenobs <- dat2[complete.cases(dat2),] #removes rows with NA
nobs <- nrow(completenobs) # counts the rows of complete observations
if ((nobs != 0) && (nobs >= threshold)) {   # checks if threshold is met
corrobs[x] <- cor(completenobs[2], completenobs[3]) #correlate sulfate and nitrate
x <- (x+1) # variable to go to next element in vector
}
}
return(corrobs)
}
cr <- corr("specdata")
summary(cr)
length(cr)
